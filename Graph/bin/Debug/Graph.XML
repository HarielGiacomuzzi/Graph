<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Graph</name>
    </assembly>
    <members>
        <member name="M:Graph.Graph.#ctor">
            <summary>Initializes a Graph without any element on it.</summary>
            *
        </member>
        <member name="M:Graph.Graph.addNode(System.String,System.Int32)">
            <summary>
            Add a new Node in the Graph without any connection to it.
            </summary>
            
            <param name="label">Node label</param>
            <param name="data">Node data</param>
            *
        </member>
        <member name="M:Graph.Graph.addNode(System.String)">
            <summary>Add a new Node in the Graph without any connection to it and with node data equals 0.</summary>
            <param name="label">Node Label</param>         * 
            *
        </member>
        <member name="M:Graph.Graph.addNonDirectedVertex(System.String,System.String)">
            <summary>Create a new NON directed vertex from node u to v with weight 0</summary>
            <param name="u">Node name</param>
            <param name="v">Node name</param>
            *
        </member>
        <member name="M:Graph.Graph.addNonDirectedVertex(System.String,System.String,System.Int32)">
            <summary>Create a new NON directed vertex from node u to v with the specified weight</summary>
            <param name="u">Node name</param>
            <param name="v">Node name</param>
            <param name="weigth">Weight of the vertex</param>
            *
        </member>
        <member name="M:Graph.Graph.neighbors(System.String)">
            <summary>Returns a string with the neihbors of a node u</summary>
            <returns>String with all neighbors of the Node u</returns>
            <param name="u">Node name</param>
            *
        </member>
        <member name="M:Graph.Graph.addDirectedVertex(System.String,System.String)">
             <summary>
             Creates a new Directed vertex from node u to node v.
             </summary>
             
             <param name="u">Node Name from</param>
             <param name="v">Node Name to</param>
            
        </member>
        <member name="M:Graph.Graph.addDirectedVertex(System.String,System.String,System.Int32)">
            <summary>Create a new directed vertex from node u to node v with the specified vertex</summary>
            <param name="u">Node name from</param>
            <param name="v">Node name to</param>
            <param name="weigth">Weight of the vertex</param>
            *
        </member>
        <member name="M:Graph.Graph.hasConnection(System.String,System.String)">
            <summary>Check if there's a way of going from node u to node v</summary>
            <param name="u">Node name</param>
            <param name="v">Node name</param>
            *
        </member>
        <member name="M:Graph.Graph.clearAllMarks">
            Clear all the marks from all nodes in the graph
            *
        </member>
        <member name="M:Graph.Graph.Components">
            <summary>Returns the Count of Components in a Graph </summary>
            *
        </member>
        <member name="M:Graph.Graph.CanReach(System.String,System.String)">
            <summary>Returns a list of all nodes who can be reached from u and v </summary>
            <param name="u">String Node name</param>
            <param name="v">String Node name</param>
            *
        </member>
        <!-- Badly formed XML comment ignored for member "M:Graph.Graph.Dijkstra(System.String,System.String)" -->
        <member name="M:Graph.Graph.DFSWalk(System.String)">
            <summary>Return a string with the result of a Depth-first search (DFS). Return a empty string if the starting Node is invalid.</summary>
            <param name="u">Starting node name</param>
            *
        </member>
        <member name="M:Graph.Graph.BFSWalk(System.String)">
            <summary>Return a string with the result of a breadth-first search (BFS). Return a empty string if the starting node is invalid.</summary>
            <param name="u">Starting node name</param>
            *
        </member>
        <member name="M:Graph.Graph.getNodeByName(System.String)">
            Returns a reference to a node bey seacrh for it's label.
            *
        </member>
        <member name="M:Graph.Graph.hasDirectConection(System.String,System.String)">
            check if the node v is neighbor of node u.
            *
        </member>
        <member name="M:Graph.Graph.CreateGraphVizFile(System.String,System.Boolean)">
            <summary>Creates a text file for use in GraphViz</summary>
            <param name="directed">Is this a directed Graph ?</param>
            <param name="where">Path to save the file</param>
            *
        </member>
        <member name="M:Graph.Graph.CreateGraphVizFile(System.String,System.Boolean,System.String)">
            <summary>Creates a text file for use in GraphViz</summary>
            <param name="directed">Is this a directed Graph ?</param>
            <param name="where">Path to save the file</param>
            <param name="name">The Graph name</param>
            *
        </member>
    </members>
</doc>
